from datetime import datetime, timezone
from dateutil import tz, parser

from sqlalchemy import select, delete, update, func, join
from app.utils.models import Langs, async_session

import aiohttp

from config import API_URL


async def get_lang_text(lang, text):
    async with async_session() as session:
        result = await session.execute(
            select(getattr(Langs, text)).where(Langs.lang == lang)
        )
        return result.scalar()


async def check_user_request(user_data: dict):
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL + 'api/telegram-users/', data=user_data) as response:
            data = await response.json()
            lang = data['lang']

            if response.status == 200:
                if 'new' in data and data['new']:
                    return 'new user'
                
                if 'tariff' in data and 'tariff_end' in data:
                    now = datetime.now(tz=tz.gettz('UTC'))

                    if data['tariff'] == 'daily':
                        tariff_end = parser.parse(data['tariff_end'])
                        if tariff_end > now:
                            days_left = (tariff_end - now).days
                            # return f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - –ø—Ä–æ–±–Ω—ã–π. –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.'
                            result_template = await get_lang_text(lang, 'daily_response')
                            result = result_template.replace('{days_left}', str(days_left))
                            return result
                        else:
                            # return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö /tariff'
                            result = await get_lang_text(lang, 'expired_response')
                            return result

                    elif data['tariff'] == 'month':
                        tariff_end = parser.parse(data['tariff_end'])
                        if tariff_end > now:
                            days_left = (tariff_end - now).days
                            # return f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - –º–µ—Å—è—á–Ω—ã–π. –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.'
                            result_template = await get_lang_text(lang, 'month_response')
                            result = result_template.replace('{days_left}', str(days_left))
                            return result
                        else:
                            # return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö /tariff'
                            result = await get_lang_text(lang, 'expired_response')
                            return result
                    
                    elif data['tariff'] == 'six-month':
                        tariff_end = parser.parse(data['tariff_end'])
                        if tariff_end > now:
                            days_left = (tariff_end - now).days
                            # return f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - 6 –º–µ—Å—è—Ü–µ–≤. –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.'
                            result_template = await get_lang_text(lang, 'six_month_response')
                            result = result_template.replace('{days_left}', str(days_left))
                            return result
                        else:
                            # return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö /tariff'
                            result = await get_lang_text(lang, 'expired_response')
                            return result
                    
                    elif data['tariff'] == 'year':
                        tariff_end = parser.parse(data['tariff_end'])
                        if tariff_end > now:
                            days_left = (tariff_end - now).days
                            # return f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ - –≥–æ–¥–æ–≤–æ–π. –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π.'
                            result_template = await get_lang_text(lang, 'year_response')
                            result = result_template.replace('{days_left}', str(days_left))
                            return result

                        else:
                            # return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Halal Checker Bot! üåø\n–í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.\n–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö /tariff'
                            result = await get_lang_text(lang, 'expired_response')
                            return result
                else:
                    return '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
            
            else:
                return '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞('
            
async def change_tariff_request(chat_id: int, tariff: str):
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL + 'api/change-tariff/', data={'chat_id': chat_id, 'tariff': tariff}) as response:
            if response.status == 200:
                return '–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ' + tariff.capitalize()
            else:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            

async def change_lang_request(chat_id: int, lang: str):
    async with aiohttp.ClientSession() as session:
        async with session.patch(API_URL + f'api/telegram-users/{chat_id}/telegram_users_partial_update/', data={'lang': lang}) as response:
            if response.status == 200:
                return True
            else:
                return False           


async def get_user_lang(chat_id: int):
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL + f'api/telegram-users/', data={'chat_id': str(chat_id)}) as response:
            if response.status == 200:
                data = await response.json()
                return data['lang']
            else:
                return False
            
def parse_tariff_end(tariff_end_str):
    formats = ["%Y-%m-%dT%H:%M:%S%z", "%Y-%m-%dT%H:%M:%S.%f%z"]

    for fmt in formats:
        try:
            tariff_end = datetime.strptime(tariff_end_str, fmt)
            return tariff_end
        except ValueError:
            pass

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç, –º–æ–∂–Ω–æ –±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å None
    raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")


async def check_tariff_not_expired(chat_id):
    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL + 'api/telegram-users/', json={'chat_id': chat_id}) as response:
            if response.status == 200:
                data = await response.json()
                if 'tariff' in data and 'tariff_end' in data:
                    try:
                        tariff_end = parse_tariff_end(data['tariff_end'])
                        now = datetime.now(timezone.utc)
                        return tariff_end > now
                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                        return False
                return False
    return False


async def tariffrequest(data, file_name):
    with open(file_name, 'rb') as photo_file:
        photo_bytes = photo_file.read()

    form_data = aiohttp.FormData()
    form_data.add_field('image', photo_bytes, filename='image.jpg', content_type='image/jpeg')

    for key, value in data.items():
        form_data.add_field(key, str(value))

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL + 'api/tariff-requests/', data=form_data) as response:
            if response.status == 201:
                return True
            else:
                print(response.status)
                print(response.text)
                return False